<template>
	<!-- #ifdef MP-WEIXIN -->
	<scroll-view class="flex-1">
		<view class="video-box">
			<text class="tip text-primary" v-if="!state.videoUrl">
				{{tipText}}
			</text>
			<video
				id="live-video"
				style="width: 100%;"
				:src="state.videoUrl"
				autoplay
				controls
				is-live
				:show-mute-btn="true"
				:show-loading="false"
				:enable-danmu="false"
				:enable-progress-gesture="true"
				:show-center-play-btn="true"
				@error="videoError"
				@play="videoPlay"
			></video>
		</view>
		<view class="flex uni-row p-base">
			<view class="avatar">
				<image src="/static/logo.png" mode=""></image>
			</view>
			<view class="ml-base">
				<text class="title">{{state.detail?.title}}</text>
				<view class="flex uni-row info mt-base">
					<text>开始于：{{state.detail?.liveStartTime}}</text>
				</view>
			</view>
		</view>
		<view class="chat-room flex flex-1">
			<view class="chat-title p-base">
				<text class="title">聊天室</text>
			</view>
			<scroll-view class="flex-1" id="message-box" :scroll-into-view="state.scrollIntoView">
				<view class="p-base">
					<view class="" v-for="(item, key) of state.messageList" :key="key" :id="`message-${key}`">
						<view class="msg-box mt-base">
							<view class="msg-head flex uni-row">
								<text class="mr-sm text-primary">{{item.username}}</text>
								<text>{{item.createTime}}</text>
							</view>
							<view class="mt-base">
								<text>{{item.message}}</text>
							</view>
						</view>
					</view>
				</view>
			</scroll-view>
			<view class="input-box flex uni-row" v-if="state.detail?.status === 'live'">
				<input class="input-wrapper flex-1 mr-sm" type="text" v-model="state.messageValue" placeholder="输入要发送的内容"/>
				<button type="primary" @click="sendMsg">发送</button>
			</view>
		</view>
	</scroll-view>
	<!-- #endif -->
	<!-- #ifdef WEB -->
	<iframePage :href="`${apiHost}/m-live/${state.id}`" @iframeReady="onIframeReady"></iframePage>
	<!-- #endif -->
</template>

<script setup lang="uts">
	import { LiveType, MessageType } from '@/pages/types/live'
	import iframePage from '@/pages/components/iframe-page/index'
	import { getLocalUserInfo } from '@/states/auth'
	import { useHost } from '@/states/host';
	const {liveHost, apiHost} = useHost()
	const state = reactive<
		{
			id: string,
			detail: LiveType | null,
			chatSocket: any,
			messageList: Array<MessageType>,
			messageValue: string,
			scrollIntoView: string,
			liveSocket: any,
			videoUrl: string
			retry: {
				retryTimes: number,
				timer: any
			},
			videoContext: any
		}
	>({
		id: '',
		detail: null,
		chatSocket: null,
		messageList: [],
		messageValue: '',
		scrollIntoView: '',
		liveSocket: null,
		videoUrl: '',
		retry: {
			retryTimes: 0,
			timer: null
		},
		videoContext: null
	})
	const userInfo = getLocalUserInfo()
	onLoad((option) => {
		state.id = option.id as string
	})
	// #ifdef WEB
	let onMessage = (win: Window) => {
		return ({data: {type}}) => {
			// if(type === 'getToken') {
			// 	win?.postMessage({ type: 'token', token: token.value}, '*');
			// }
			if(type === 'getInfo') {
				win?.postMessage({ type: 'info', userInfo: userInfo}, '*');
			}
		}
	}
	const onIframeReady = (win: Window) => {
		onMessage = onMessage(win) as any
		window.addEventListener('message', onMessage)
	}
	onUnmounted(() => {
		window.removeEventListener('message', onMessage)
	})
	// #endif
	// #ifdef MP-WEIXIN
	import {reactive, onBeforeUnmount} from 'vue'
	import { getLiveDetail } from '@/pages/request/live'
	import * as io from '@/js_sdk/hyoga-uni-socket_io/uni-socket.io';
	
	onMounted(async () => {
		await getLive()
		connectChatSocket()
		connectLiveSocket()
		state.videoContext = uni.createVideoContext('live-video')
	})
	onBeforeUnmount(() => {
		if(state.chatSocket) {
			state.chatSocket.disconnect()
		}
		if(state.liveSocket) {
			state.liveSocket.disconnect()
		}
	})
	const tipText = computed(() => {
		if(state.retry.timer) {
			return '正在尝试链接'
		}
		switch(state.detail?.status) {
			case 'ended':
				return '直播结束'
			case 'live':
				return '直播暂停'
			case 'scheduled':
				return '直播未开始'
		}
	})
	const getLive = async () => {
		await getLiveDetail(state.id).then(res => {
			const {
				data,
				success
			} = res as {
				data: LiveType,
				success: boolean
			}
			if(success) {
				state.detail = data
			}
		})
	}
	const connectChatSocket = () => {
		if(state.detail?.status !== 'live') {
			return
		}
		state.chatSocket = io(`${liveHost}/ws/chat?roomId=${state.id}`,{
			query: {
				hoomId: state.id
			},
			transports: ['websocket', 'polling']
		})
		state.chatSocket.on('connect', () => {
			console.log('connected')
			state.chatSocket.on('message',(msg: string) => {
				state.messageList.push(JSON.parse(msg) as MessageType)
				nextTick(() => {
					state.scrollIntoView = `message-${state.messageList.length - 1}`
				})
			})
			state.chatSocket.on('messageList', (messageList: string[]) => {
				messageList.forEach(msg => {
					state.messageList.push(JSON.parse(msg) as MessageType)
				})
				nextTick(() => {
					state.scrollIntoView = `message-${messageList.length - 1}`
				})
			})
			state.chatSocket.emit('messageAll')
		})
		state.chatSocket.on('disconnect', () => {
			console.log('disconnect')
		})
	}
	const sendMsg = () => {
		if(!state.messageValue) {
			uni.showToast({
				title: '请输入要发送的消息',
			})
		}
		if(state.chatSocket) {
			state.chatSocket.emit('messageSend', JSON.stringify({
			  userId: getVisitorId(),
			  username: '游客',
			  message: state.messageValue,
			  createTime: new Date()
			}))
			state.messageValue = ''
		}
	}
	const connectLiveSocket = () => {
		if(state.detail?.status !== 'live') {
			return
		}
		state.liveSocket = io(`${liveHost}/ws/live?roomId=${state.id}`,{
			query: {
				hoomId: state.id
			},
			transports: ['websocket', 'polling']
		})
		state.liveSocket.on('connect', res => {
			state.liveSocket.on('ffmpegReady', res => {
				getHlsStream()
			})
			state.liveSocket.on('ffmpegStoped', () => {
				clearTimer()
			})
			getHlsStream()
		})
	}
	const getHlsStream = () => {
		state.liveSocket.emit('hlsStream', {}, (data) => {
			state.videoUrl = `${liveHost}${data.url}`
		})
	}
	const videoError = () => {
		state.videoUrl = ''
		if(state.retry.timer) {
			return
		}
		state.retry.timer = setInterval(() => {
			if(state.retry.retryTimes > 7) {
				clearTimer()
				return
			}
			getHlsStream()
			state.retry.retryTimes ++
		}, 2000)
	}
	const videoPlay = () => {
		clearTimer()
	}
	const clearTimer = () => {
		clearInterval(state.retry.timer)
		state.retry.retryTimes = 0
		state.retry.timer = null
	}
	const getVisitorId = () => {
		const idKey = 'visitorIdId'
		  let id = uni.getStorageSync(idKey)
		  if(!id) {
		    id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
		      const r = (Math.random() * 16) | 0
		      const v = c === 'x' ? r : (r & 0x3) | 0x8
		      return v.toString(16)
		    })
		    uni.setStorageSync(idKey, id)
		  }
		  return id
	}
	// #endif
</script>

<style lang="scss">
	.video-box {
		position: relative;
		.tip {
			position: absolute;
			left: 50%;
			top: 50%;
			color: white;
			transform: translate(-50%, -50%);
			z-index: 1;
		}
	}
	.chat-title {
		border-bottom: 1px solid $uni-border-color;
	}
	.input-box {
		padding: $uni-spacing-col-base;
		border-top: 1px solid $uni-border-color;
		.input-wrapper {
			height: 100%;
		}
		button {
			font-size: $uni-font-size-base;
		}
	}
</style>
